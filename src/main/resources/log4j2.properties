property.LOG_HOME=/opt/huawei/logs/TCS
appenders = console, all

appender.console.type = Console
appender.console.name = ConsoleAppender
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS}|[%5p]|[%t]|[%l]|%m%n

appender.all.type=RollingFile
appender.all.name=AllAppender
appender.all.fileName=${LOG_HOME}/all/all.log
# 指定当发生Rolling时，文件的转移和重命名规则
appender.all.filePattern=${LOG_HOME}/all/all_%d{yyyy-MM-dd-HH}.log
appender.all.layout.type=PatternLayout
appender.all.layout.pattern=%highlight{%d{yyyy-MM-dd HH:mm:ss.SSS}|[%5p]|[%t]|[%l]|%m%n}{FATAL=white, ERROR=red, WARN=blue, INFO=Green, DEBUG=Yellow, TRACE=blue}
# 指定记录文件的封存策略，该策略主要是完成周期性的日志文件封存工作
appender.all.policies.type=Policies
# 基于时间的触发策略
appender.all.policies.time.type=TimeBasedTriggeringPolicy
# 当前记录周期为每1h生成一个文件
appender.all.policies.time.interval=1
appender.all.policies.time.modulate=true
# 基于日志文件体积的触发策略
appender.all.policies.size.type=SizeBasedTriggeringPolicy
# 当日志文件体积大于size指定的值时，触发Rolling
appender.all.policies.size.size=20M
# 文件封存的覆盖策略
appender.all.strategy.type=DefaultRolloverStrategy
# 生成分割（封存）文件的个数
appender.all.strategy.max=100

rootLogger.level=info
rootLogger.appenderRef.stdout.ref=ConsoleAppender
rootLogger.appenderRef.rolling.ref=AllAppender
rootLogger.additivity=false

logger.all.name=AllLogger
logger.all.level=info
logger.all.appenderRef.stdout.ref=ConsoleAppender
logger.all.appenderRef.rolling.ref=AllAppender
